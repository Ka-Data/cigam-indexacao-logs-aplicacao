input {
    file {

		#path => "${PWD}/test/load_task.log"
		#path => "${PWD}/test/query.log"
		path => "${PWD}/test/handle_event.log"
		#path => "${PWD}/test/handle_event_load_task.log"

		#path => "${PWD}/logs/tela_CG00343.log"
		start_position => "beginning"
		sincedb_path => "/dev/null"
    }

    #stdin {}
}

filter {
    if [message] !~ '^ <-1>' {
        drop {}
    }

    dissect {
        mapping => {
            message => " <-1> %{@timestamp} %{+@timestamp->} %{log_level} - %{log}"
            log_level => "[%{log_level}]"
        }
    }

    mutate {
        strip => ["log_level"]
    }

    if [log] =~ 'OPEN|EXECUTE|FETCH|DESCRIBE|BIND|PREPARE' {
        mutate { add_field => { "log_type" => "QUERY" } }
    } else if [log] =~ '>>Starts load|Ends Load Task' {
        mutate { add_field => { "log_type" => "LOAD_TASK" } }
    } else if [log] =~ '>>Starts Handle (User|Function|Timer|Expression) Event|<<Ends Handle (User|Function|Timer|Expression) Event' {
        mutate { add_field => { "log_type" => "HANDLE_EVENT" } }
    }

    if [log_type] {
        grok {
            patterns_dir => ["${PWD}/patterns"]
            match =>{ log => "%{CIGAM_LOG}" }
            tag_on_failure => "_grok-erro-log"
        }
    } else {
        drop {}
    }

    ruby {
        code => "

        log = event.get('log')
        if log
            event.set('indentation_level', log.split(log.strip).first.size)
        end

        "
        tag_on_exception => "_ruby-erro_calculo_nivel_indentacao"
    }

    if [log_type] == 'QUERY' {
        if [query_operation_type] == 'OPEN' {
            aggregate {
                task_id => "%{query_id}"
                code => "

                map['start_timestamp'] = event.get('@timestamp')

                "
                map_action => "create"
            }

            drop {}
        } else if [query_operation_type] == 'EXECUTE' {
            aggregate {
                task_id => "%{query_id}"
                code => "

                map['query_statement'] = event.get('query_statement')
                map['query_select'] = event.get('query_select')
                map['query_from'] = event.get('query_from')
                map['query_where'] = event.get('query_where')
                map['query_order_by'] = event.get('query_order_by')

                "
                map_action => "update"
            }

            drop {}
        } else if [query_operation_type] == 'FETCH' {
            aggregate {
                task_id => "%{query_id}"
                code => "

                event.set('start_timestamp', map['start_timestamp'])
                event.set('end_timestamp', event.get('@timestamp'))
                event.set('query_statement', map['query_statement'])
                event.set('query_select', map['query_select'])
                event.set('query_from', map['query_from'])
                event.set('query_where', map['query_where'])
                event.set('query_order_by', map['query_order_by'])

                "
                map_action => "update"
                end_of_task => true
            }

            mutate {
                strip => [ "query_statement", "query_select", "query_from", "query_where", "query_order_by" ]
            }


            date {
                match => [ "start_timestamp", "dd/MM/yyyy HH:mm:ss.SSS", "ISO8601" ]
                target => "start_timestamp"
                tag_on_failure => "_date-query-erro_conversao_data_inicio"
            }

            date {
                match => [ "end_timestamp", "dd/MM/yyyy HH:mm:ss.SSS", "ISO8601" ]
                target => "end_timestamp"
                tag_on_failure => "_date-query-erro_conversao_data_fim"
            }

            if [start_timestamp] and [end_timestamp] {
                ruby {
                    code => "

                    event.set('duration', event.get('end_timestamp') - event.get('start_timestamp'))

                    "
                    tag_on_exception => "_ruby-query-erro_calculo_duracao"
                }
            } else {
                mutate { add_tag => [ "_query-nao_foi_possivel_calcular_duracao"  ] }
            }

            mutate {
                remove_field => [ "query_operation_type", "query_prefix", "query_prefix_number", "query_descriptor", "sequence", "log" ]
            }
        } else {
            drop {}
        }
    } else if [log_type] == 'LOAD_TASK' {
        if [task_prefix] == '>>Starts load' {
            aggregate {
                task_id => "%{indentation_level}"
                code => "

                map['start_timestamp'] = event.get('@timestamp')
                map['task_mode'] = event.get('task_mode')
                map['task_load_type'] = event.get('task_load_type')
                map['task_instance'] = event.get('task_instance')
                map['task_name'] = event.get('task_name')
                map['task_load_type'] = event.get('task_load_type')

                "
                map_action => "create"
            }

            drop {}
        } else if [task_prefix] == 'Ends Load Task' {
            aggregate {
                task_id => "%{indentation_level}"
                code => "

                event.set('start_timestamp', map['start_timestamp'])
                event.set('end_timestamp', event.get('@timestamp'))
                event.set('task_mode', map['task_mode'])
                event.set('task_load_type', map['task_load_type'])
                event.set('task_instance', map['task_instance'])
                event.set('task_name', map['task_name'])
                event.set('task_load_type', map['task_load_type'])

                "
                map_action => "update"
                end_of_task => true
            }

            date {
                match => [ "start_timestamp", "dd/MM/yyyy HH:mm:ss.SSS", "ISO8601" ]
                target => "start_timestamp"
                tag_on_failure => "_date-task-erro_conversao_data_inicio"
            }

            date {
                match => [ "end_timestamp", "dd/MM/yyyy HH:mm:ss.SSS", "ISO8601" ]
                target => "end_timestamp"
                tag_on_failure => "_date-load-task-erro_conversao_data_fim"
            }

            if [start_timestamp] and [end_timestamp] {
                ruby {
                    code => "

                    event.set('duration', event.get('end_timestamp') - event.get('start_timestamp'))

                    "
                    tag_on_exception => "_ruby-load-task-erro_calculo_duracao"
                }
            } else {
                mutate { add_tag => [ "_load-task-nao_foi_possivel_calcular_duracao"  ] }
            }

            mutate {
                remove_field => [ "task_prefix", "log" ]
            }
        } else {
            drop {}
        }
    } else if [log_type] == 'HANDLE_EVENT' {
        if [handle_event_prefix] =~ '>>Starts Handle' {
            aggregate {
                task_id => "%{handle_event_name}"
                code => "

                map['start_timestamp'] = event.get('@timestamp')
                map['handle_event_type'] = event.get('handle_event_type')
                map['handle_event_name'] = event.get('handle_event_name')

                "
                map_action => "create"
            }

            drop {}
        } else if [handle_event_prefix] =~ 'Ends Handle' {
            aggregate {
                task_id => "%{handle_event_name}"
                code => "

                event.set('start_timestamp', map['start_timestamp'])
                event.set('end_timestamp', event.get('@timestamp'))
                event.set('handle_event_type', map['handle_event_type'])
                event.set('handle_event_name', map['handle_event_name'])

                "
                map_action => "update"
                end_of_task => true
            }

            date {
                match => [ "start_timestamp", "dd/MM/yyyy HH:mm:ss.SSS", "ISO8601" ]
                target => "start_timestamp"
                tag_on_failure => "_date-handle-event-erro_conversao_data_inicio"
            }

            date {
                match => [ "end_timestamp", "dd/MM/yyyy HH:mm:ss.SSS", "ISO8601" ]
                target => "end_timestamp"
                tag_on_failure => "_date-handle-event-erro_conversao_data_fim"
            }

            if [start_timestamp] and [end_timestamp] {
                ruby {
                    code => "

                    event.set('duration', event.get('end_timestamp') - event.get('start_timestamp'))

                    "
                    tag_on_exception => "_ruby-handle-event-erro_calculo_duracao"
                }
            } else {
                mutate { add_tag => [ "_handle-event-nao_foi_possivel_calcular_duracao"  ] }
            }

            mutate {
                remove_field => [ "handle_event_prefix", "log" ]
            }
        } else {
            drop {}
        }
    }

    #date {
    #    match => [ "@timestamp", "dd/MM/yyyy HH:mm:ss.SSS", "ISO8601" ]
    #    tag_on_failure => "_date-erro_conversao_timestamp"
    #}

    mutate {
        remove_field => [ "message", "host", "path", "log_level", "log_type" ]
    }
}

output {
    #stdout { codec => dots }
    stdout { codec => rubydebug }
}
